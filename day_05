Q1.
  sol:
class Solution {
public:
    int distMoney(int money, int children) {
        if (money < children){ return -1; }
        money -= children;
        int count = 0;
        while (money >= 7 && children > 0) {
            money -= 7;
            count++;
            children--;
        }
        if (children == 1 && money == 3) { count--; }
        if (children == 0 && money > 0) {  return count - 1;}
        return count;
    }
};
Approach: first distribute one dollar to each children then try for the rest of the money 
Q2.
  sol:
class Solution {
public:
    int longestPalindrome(string s) {
      if(s.size()==1)
      {
        return 1;
      }
      sort(s.begin(),s.end());
      int count1=1;
      int count=0;
      for(int i=0;i<s.size();i++)
      {
        if(s[i]==s[i+1])
        {
            count1++;
        }
        else{
            if(count1%2==1)
            {
                count1--;
            }
            count+=count1;
            count1=1;
        }
      }
      if(count==s.size())
      return count;
      return count+1;  
    }
};
Approch: first sort the array then check for the elements with even frequency agar odd hoto then odd to phle even m convert krlo then if the count is still less then the size of the array then return count+1;
else return count
